Lab 3

Nick Palumbo  - npalumbo
Seung In Park - se19

In this lab we had to make a simple output of different formats of data. The files we needed to make were a Makefile, poly.c and dump.c. 

Makefile a file that helps simplify code compilation. It was used for when we needed to recompile our code when we made changes. Makefile is good when we do not want to type out every file to comile them and make them into an executable. The file has all the instructions to compile a *.c source file to a *.o object file and then to an executable. Now our code can be easily executed with the simple command "make".

poly.c was a c source file with a c program that made a lot of raw data. Within poly was a union that had multiple arrays that were going to be used when creating a memory dump. The union had an array of 8 unsigned chars, array of 4 shorts, array of 2 ints, array of 2 floats, and a double. Within main, the union was used to create an array of 6 and called rawdata. 4 for loops were called to fill up rawdata with the desired data. 

dump.c was a c source file that did all the printing of data. We individually made print statements for each type of data that would be displayed. We made sure that the last print statement would hold the new line '\n' charater so that when the row was done printing, the next row could then be printed and so on. There were 7 types of data to be displayed in our table. The address, char, hexCh, short, integerm float, and finally doubleFloat would all be printed line by line until the length was hit which the length was equal to the size of our rawdata array of unions. A for loop was called so that an integer 'i' could be incremented for each row of our table so that each row would have different data. 

Some of the troubles we came across were when we had to format the strings to get everything aligned nice and neat. When we started writing the print statements within dump.c we made sure that the format for each column was correct before moving on to the next column. Making sure each column was formatted correctly before moving on made everything readible and our errors could be easily found. The first problem we came across was when we had to format the hexadecimal characters. We were unsure hoe to properly format the null lines and also a line that was 0x9. To fix the null lines we simply added an if statement stating that if the hexadecimal character existed then print it out, else print out "0x00". As for the 0x9 we finally figured out that we needed to make the string output in the form "%#04x". This meant that the hexadecimal character needs to fill 4 spaces and fill the left with 0s when needed. After understanding how the widths worked when printing the rest of the assignment went by fast. We learned a lot about formatting strings and how to set percision on floats and doubles. Another big learning curve was when we started off with a void pointer. We had to usecasting to make each void pointer into the desired data type for the output in the table columns. To cast a void pointer into a character data type we had to add *(char *) before our void pointer 'p'. This made it so that p would now be read as a character data type and we can change the input 'p' as if it were a character.
